{"version":3,"sources":["../src/app.js"],"names":["createError","require","express","path","cookieParser","morgan","cors","app","winston","set","join","__dirname","use","stream","json","urlencoded","extended","static","AppConf","allowedOrigin","allowedMethods","allowedHeaders","exposedHeaders","credentials","indexRouter","personRouter","req","res","next","err","locals","message","error","get","status","originalUrl","method","ip","render","module","exports"],"mappings":";;AAAA;;AAGA;;AACA;;;;AAFA;AAGA,IAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMG,YAAY,GAAGH,OAAO,CAAC,eAAD,CAA5B;;AACA,IAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMM,GAAG,GAAGL,OAAO,EAAnB,C,CAEA;;AACA,IAAIM,OAAO,GAAGP,OAAO,CAAC,kBAAD,CAArB,C,CAEA;;;AACAM,GAAG,CAACE,GAAJ,CAAQ,OAAR,EAAiBN,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAjB;AACAJ,GAAG,CAACE,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;AAEAF,GAAG,CAACK,GAAJ,CAAQP,MAAM,CAAC,UAAD,EAAa;AAAEQ,EAAAA,MAAM,EAAEL,OAAO,CAACK;AAAlB,CAAb,CAAd;AACAN,GAAG,CAACK,GAAJ,CAAQV,OAAO,CAACY,IAAR,EAAR;AACAP,GAAG,CAACK,GAAJ,CAAQV,OAAO,CAACa,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AACAT,GAAG,CAACK,GAAJ,CAAQR,YAAY,EAApB;AACAG,GAAG,CAACK,GAAJ,CAAQV,OAAO,CAACe,MAAR,CAAed,IAAI,CAACO,IAAL,CAAUC,SAAV,EAAqB,QAArB,CAAf,CAAR,E,CAEA;;AACAJ,GAAG,CAACK,GAAJ,CAAQN,IAAI,CAAC;AACX,mBAAiBY,qBAAQZ,IAAR,CAAaa,aADnB;AAEX,oBAAkBD,qBAAQZ,IAAR,CAAac,cAFpB;AAGX,oBAAkBF,qBAAQZ,IAAR,CAAae,cAHpB;AAIX,oBAAkBH,qBAAQZ,IAAR,CAAagB,cAJpB;AAKX,iBAAeJ,qBAAQZ,IAAR,CAAaiB;AALjB,CAAD,CAAZ,E,CAQA;;AACAhB,GAAG,CAACK,GAAJ,CAAQ,GAAR,EAAaY,cAAb;AACAjB,GAAG,CAACK,GAAJ,CAAQ,SAAR,EAAmBa,eAAnB,E,CAEA;;AACAlB,GAAG,CAACK,GAAJ,CAAQ,UAAUc,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAChCA,EAAAA,IAAI,CAAC5B,WAAW,CAAC,GAAD,CAAZ,CAAJ;AACD,CAFD,E,CAIA;;AACAO,GAAG,CAACK,GAAJ,CAAQ,UAAUiB,GAAV,EAAeH,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AACrC;AACAD,EAAAA,GAAG,CAACG,MAAJ,CAAWC,OAAX,GAAqBF,GAAG,CAACE,OAAzB;AACAJ,EAAAA,GAAG,CAACG,MAAJ,CAAWE,KAAX,GAAmBN,GAAG,CAACnB,GAAJ,CAAQ0B,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCJ,GAAvC,GAA6C,EAAhE,CAHqC,CAKrC;;AACArB,EAAAA,OAAO,CAACwB,KAAR,WAAiBH,GAAG,CAACK,MAAJ,IAAc,GAA/B,gBAAwCL,GAAG,CAACE,OAA5C,gBAAyDL,GAAG,CAACS,WAA7D,gBAA8ET,GAAG,CAACU,MAAlF,gBAA8FV,GAAG,CAACW,EAAlG,GANqC,CAOrC;;AACAV,EAAAA,GAAG,CAACO,MAAJ,CAAWL,GAAG,CAACK,MAAJ,IAAc,GAAzB;AACAP,EAAAA,GAAG,CAACW,MAAJ,CAAW,OAAX;AACD,CAVD;AAYAC,MAAM,CAACC,OAAP,GAAiBjC,GAAjB","sourcesContent":["import AppConf from './config/application'\r\n\r\n// setting router\r\nimport indexRouter from './routes/index'\r\nimport personRouter from './routes/person'\r\nconst createError = require('http-errors')\r\nconst express = require('express')\r\nconst path = require('path')\r\nconst cookieParser = require('cookie-parser')\r\nconst morgan = require('morgan')\r\nconst cors = require('cors')\r\nconst app = express()\r\n\r\n// setting Log\r\nvar winston = require('./config/winston')\r\n\r\n// view engine setup\r\napp.set('views', path.join(__dirname, 'views'))\r\napp.set('view engine', 'pug')\r\n\r\napp.use(morgan('combined', { stream: winston.stream }))\r\napp.use(express.json())\r\napp.use(express.urlencoded({ extended: false }))\r\napp.use(cookieParser())\r\napp.use(express.static(path.join(__dirname, 'public')))\r\n\r\n// set header\r\napp.use(cors({\r\n  'allowedOrigin': AppConf.cors.allowedOrigin,\r\n  'allowedMethods': AppConf.cors.allowedMethods,\r\n  'allowedHeaders': AppConf.cors.allowedHeaders,\r\n  'exposedHeaders': AppConf.cors.exposedHeaders,\r\n  'credentials': AppConf.cors.credentials\r\n}))\r\n\r\n// setting Router\r\napp.use('/', indexRouter)\r\napp.use('/person', personRouter)\r\n\r\n// catch 404 and forward to error handler\r\napp.use(function (req, res, next) {\r\n  next(createError(404))\r\n})\r\n\r\n// error handler\r\napp.use(function (err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message\r\n  res.locals.error = req.app.get('env') === 'development' ? err : {}\r\n\r\n  // add this line to include winston logging\r\n  winston.error(`${err.status || 500} - ${err.message} - ${req.originalUrl} - ${req.method} - ${req.ip}`)\r\n  // render the error page\r\n  res.status(err.status || 500)\r\n  res.render('error')\r\n})\r\n\r\nmodule.exports = app\r\n"],"file":"app.js"}