{"version":3,"sources":["../../src/controllers/person.js"],"names":["module","exports","getAllPerson","req","res","limit","AppConf","page","default","offset","totalRows","PersonService","getCountPerson","then","data","count","pages","Math","ceil","parseInt","emp","status","CodeAPI","send","length","message","error","getAllPersonByIdOrPage","next","id","params","dataPerson","getAllPersonWhereById","addNewPerson","rep","body","result","Joi","validate","Validate","schema","err","_value","dataValues","deletePerson","getPersonById","deletePersonById","updateAgePerson","age","isResult","updateAgePersonById","downAgePerson"],"mappings":"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","sourcesContent":["import * as PersonService from '../services/person.js'\r\nimport * as Joi from 'joi'\r\nimport * as Validate from '../models/validate/personvalidate'\r\nimport AppConf from '../config/application'\r\nimport CodeAPI from '../models/response/codes'\r\n\r\nmodule.exports = {\r\n  // get all person\r\n  getAllPerson: (req, res) => {\r\n    let limit = AppConf.page.default\r\n    // number of records per page\r\n    let offset = 0\r\n    let page = 1 // page number current\r\n    // Total records\r\n    let totalRows = 0\r\n    // call service get all emp\r\n    PersonService.getCountPerson().then((data) => {\r\n      totalRows = data.count\r\n      const pages = Math.ceil(parseInt(totalRows) / parseInt(limit))\r\n      // Total page\r\n      offset = limit * (page - 1)\r\n      PersonService.getAllPerson(limit, offset).then((emp) => {\r\n        res.status(CodeAPI[200]).send({\r\n          data: emp,\r\n          length: emp.length,\r\n          pages: pages\r\n        })\r\n      }, () => {\r\n        res.status(CodeAPI[204]).send({\r\n          message: 'No data',\r\n          data: {}\r\n        })\r\n      })\r\n    }, (error) => {\r\n      res.status(CodeAPI[500]).send({\r\n        message: error.message\r\n      })\r\n    })\r\n  },\r\n\r\n  // get more person id\r\n  getAllPersonByIdOrPage: (req, res, next) => {\r\n    let limit = AppConf.page.default\r\n    // number of records per page\r\n    let offset = 0\r\n    // page number current\r\n    let id = parseInt(req.params.id)\r\n    let page = parseInt(req.params.page)\r\n      // Gọi service\r\n      if ( (id === 0) || (page === 0) ){\r\n        PersonService.getAllPerson(limit, offset).then((dataPerson) => {\r\n          res.status(CodeAPI[200]).send({\r\n            data: dataPerson,\r\n            length: dataPerson.length,\r\n            pages: page\r\n          })\r\n        }, () => {\r\n          res.status(CodeAPI[204]).send({\r\n            message: 'No data',\r\n            data: {}\r\n          })\r\n        })\r\n      } else {\r\n        PersonService.getAllPersonWhereById(limit, offset, id).then((dataPerson) => {\r\n          res.status(CodeAPI[200]).send({\r\n            data: dataPerson,\r\n            length: dataPerson.length,\r\n            pages: page\r\n          })\r\n        }, () => {\r\n          res.status(CodeAPI[204]).send({\r\n            message: 'No data',\r\n            data: {}\r\n          })\r\n        })\r\n      }\r\n  },\r\n\r\n  // getByIdPerson: (req, res) => {\r\n  //   // get emp với id\r\n  //   PersonService.getPersonById(parseInt(req.params.id)).then((data) => {\r\n  //     if (data.length > 0) {\r\n  //       res.status(CodeAPI[200]).send({\r\n  //         data: data[0],\r\n  //         length: data.length\r\n  //       })\r\n  //     } else {\r\n  //       return res.status(CodeAPI[404]).send({\r\n  //         message: 'Emp not found with id  ' + req.params.id\r\n  //       })\r\n  //     }\r\n  //   }, (error) => {\r\n  //     return res.status(CodeAPI[500]).send({\r\n  //       message: ' Server err : ' + error\r\n  //     })\r\n  //   })\r\n  // },\r\n  // add a new employeee\r\n\r\n  addNewPerson: (rep, res) => {\r\n    let data = rep.body\r\n    // validate input\r\n    let result = Joi.validate(data, Validate.schema, (err, _value) => {\r\n      if (err) return false\r\n      return true\r\n    })\r\n    if (result) {\r\n      PersonService.addNewPerson(data).then((data) => {\r\n        res.status(CodeAPI[200]).send({\r\n          data: data.dataValues\r\n        })\r\n      }, (error) => {\r\n        return res.status(CodeAPI[500]).send({\r\n          message: 'Error retrieving Person with id ' + error\r\n        })\r\n      })\r\n    } else {\r\n      return res.status(CodeAPI[400]).send({\r\n        message: 'The url in the request is invalid : ' + rep.body.id\r\n      })\r\n    }\r\n  },\r\n\r\n  // update employee\r\n\r\n  // updatePerson: async (rep, res) => {\r\n  //   const data = rep.body\r\n  //   let result = Joi.validate(data, Validate.schema, (err, _value) => {\r\n  //     if (err) return false\r\n  //     return true\r\n  //   })\r\n\r\n  //   if (result) {\r\n  //     try {\r\n  //       let emp = await PersonService.getPersonById(parseInt(rep.params.id))\r\n  //       if (emp.length > 0) {\r\n  //         await PersonService.updatePersonById(emp, data)\r\n  //         res.status(CodeAPI[200]).send({\r\n  //           data: emp\r\n  //         })\r\n  //       }\r\n  //     } catch (error) {\r\n  //       res.status(CodeAPI[400])({\r\n  //         data: {},\r\n  //         message: `Cannot update a new emp failed: ${error}`\r\n  //       })\r\n  //     }\r\n  //   } else {\r\n  //     return res.status(CodeAPI[400]).send({\r\n  //       message: 'Input is invalid, please check input : '\r\n  //     })\r\n  //   }\r\n  // },\r\n\r\n  // delete employee\r\n\r\n  deletePerson: (rep, res) => {\r\n    // get id\r\n    let id  = parseInt(rep.params.id)\r\n    PersonService.getPersonById(id).then((data) => {\r\n      if (data.length > 0) {\r\n        PersonService.deletePersonById(id).then(() => {\r\n          res.status(CodeAPI[200]).send({\r\n            result: true\r\n          })\r\n        }, () => {\r\n          res.status(CodeAPI[200]).send({\r\n            result: false\r\n          })\r\n        })\r\n      } else {\r\n        res.status(CodeAPI[404]).send({\r\n          message: 'Emp not found with id ' + id\r\n        })\r\n      }\r\n    }, (error) => {\r\n      return res.status(CodeAPI[500]).send({\r\n        message: ' Server err : ' + error\r\n      })\r\n    })\r\n  },\r\n\r\n  // update age person id\r\n  updateAgePerson: (rep, res) => {\r\n    let id = parseInt(rep.params.id)\r\n    PersonService.getPersonById(id).then((data) => {\r\n      // No data\r\n      if(data.length === 0)\r\n      {\r\n        res.status(CodeAPI[500]).send({\r\n          message: 'Not update'\r\n        })\r\n      }\r\n      else{\r\n        let age = parseInt(data[0].dataValues.age + 1);\r\n        if (age <= 149) {\r\n         var isResult =  PersonService.updateAgePersonById(id,age)\r\n          if(isResult===1){\r\n            res.status(CodeAPI[200]).send({\r\n              result: true\r\n            })\r\n          } else \r\n          {\r\n            res.status(CodeAPI[204]).send({\r\n              result: false\r\n            })\r\n          }\r\n        } else {\r\n          return res.status(CodeAPI[404]).send({\r\n            message: 'Check input age'\r\n          })\r\n        }\r\n      }\r\n    }, (error) => {\r\n      res.status(CodeAPI[500]).send({\r\n        message: error.message\r\n      })\r\n    })\r\n  },\r\n\r\n  // down age\r\n  downAgePerson: (rep, res) => {\r\n    let id = parseInt(rep.params.id)\r\n    PersonService.getPersonById(id).then((data) => {\r\n      // No data\r\n      if(data.length === 0)\r\n      {\r\n        res.status(CodeAPI[500]).send({\r\n          message: 'Not update'\r\n        })\r\n      }\r\n      else{\r\n        let age = parseInt(data[0].dataValues.age - 1);\r\n        if (age >= 15) {\r\n         var isResult =  PersonService.updateAgePersonById(id,age)\r\n          if(isResult===1){\r\n            res.status(CodeAPI[200]).send({\r\n              result: true\r\n            })\r\n          } else \r\n          {\r\n            res.status(CodeAPI[204]).send({\r\n              result: false\r\n            })\r\n          }\r\n        } else {\r\n          return res.status(CodeAPI[404]).send({\r\n            message: 'Check input age'\r\n          })\r\n        }\r\n      }\r\n    }, (error) => {\r\n      res.status(CodeAPI[500]).send({\r\n        message: error.message\r\n      })\r\n    })\r\n  }\r\n}"],"file":"person.js"}